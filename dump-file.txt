
for indexName, indexMap := range db.index {
	dynamicMap := make(indexValueType)
	for indexValue, ids := range indexMap {
		dynamicMap[indexValue] = ids
	}
	details[indexName] = dynamicMap
}

{
	"name": {
		"kumar": [
			"88248ce5-4a41-4794-83fc-ff7fa359bc32"
		],
		"nanda": [
			"a864baa1-5807-4ca6-bbf7-0603f2d1a001"
		]
	}
}

details := make([]map[string]interface{}, 0, 1000)
for indexName, indexMap := range db.index {
	println("indexName ", indexName)
	fmt.Printf("indexMap with interface{} values: %v\n", indexMap)

	for indexValue, ids := range indexMap {
		fmt.Printf("indexValue with interface{} values: %v\n", indexValue)
		dynamicMap := make(map[string]interface{})
		dynamicMap["index"] = indexName
		dynamicMap["key"] = indexValue
		dynamicMap["ids"] = ids

		// data := {index: indexName, key: indexValue}
		details = append(details, dynamicMap)
	}
}


[
	// Read by index
	router.POST(path+"/filterbyindex", func(c *gin.Context) {
		if db == nil {
			c.JSON(http.StatusBadRequest, gin.H{"message": db.DatabaseName + " database deleted"})
			return
		}

		if collection.IsDeleted {
			c.JSON(http.StatusBadRequest, gin.H{"message": collection.CollectionName + " collection deleted"})
			return
		}

		var value []in_memory_database.GenericKeyValue

		if err := c.BindJSON(&value); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			return
		}

		result := collection.FilterByIndexKey(value)

		c.JSON(http.StatusCreated, gin.H{"data": result})
	})

    {
        "ids": [
            "698f7be6-7254-4716-8b59-0ae0a161e95c"
        ],
        "index": "name",
        "key": "nanda"
    }
]




//  filteredIndexMap =  {
// 	city : {chennai: {100-ids}, noida: {200-ids}, ... 3cities}
// 	pincode : {600100: {10-ids}, 600110: {5-ids}, 100110: {40-ids} , .... 100 picodes}
//  }

// keyToSearchA = city
// valueToSearchA = chennai

// keyToSearchB = picode
// valueToSearchB = 600100

